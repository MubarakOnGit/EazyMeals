import 'package:eazy_meals/screens/VerificationScreen.dart';
import 'package:eazy_meals/screens/splash_screen.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'package:eazy_meals/screens/onboarding_screen.dart';
import 'package:eazy_meals/screens/login_screen.dart';
import 'package:eazy_meals/home/customer_dashboard.dart';
import 'package:eazy_meals/home/menu_screen.dart';
import 'package:eazy_meals/home/view_all_screen.dart';
import 'package:get/get.dart';
import 'package:eazy_meals/controllers/order_status_controller.dart'; // Adjust path as needed

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase with error handling
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  } catch (e) {
    // In production, you might want to log this error instead of printing
  }

  // Initialize GetX controllers globally
  Get.put(OrderController(), permanent: true); // Permanent ensures it persists

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key}); // Use const constructor for better performance

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      debugShowCheckedModeBanner: false, // Already disabled, kept for clarity
      home: SplashScreen(), // Set SplashScreen as entry point
      routes: {
        '/onboarding': (context) => OnboardingScreen(),
        '/login': (context) => LoginScreen(),
        '/CustomerDashboard': (context) => CustomerDashboard(),
        '/verification': (context) => VerificationScreen(),
        '/menu': (context) => MenuScreen(),
        '/viewAll': (context) => ViewAllScreen(),
      },
      // Ensure responsiveness across screen sizes
      builder: (context, child) {
        // Use TextScaler directly without referencing textScaleFactor
        final mediaQueryData = MediaQuery.of(context);
        return MediaQuery(
          data: mediaQueryData.copyWith(
            textScaler: const TextScaler.linear(
              1.0,
            ).clamp(minScaleFactor: 1.0, maxScaleFactor: 1.2),
          ),
          child: child!,
        );
      },
    );
  }
}
